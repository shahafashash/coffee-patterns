{
    "Factory-Singleton Blend": {
        "scope": "python",
        "prefix": "!blend_factory_singleton",
        "body": [
            "from __future__ import annotations",
            "from abc import ABC, abstractmethod",
			"from typing import Any, Dict",
			"",
			"class ${1:SingletonMeta}(type):",
			"    \"\"\"",
			"    Metaclass implementing the Singleton design pattern.",
			"    \"\"\"",
			"    _instances: Dict[${1:SingletonMeta}, Any] = {}",
			"",
			"    def __call__(cls, *args, **kwargs):",
			"        \"\"\"",
			"        Override the default behavior of creating instances.",
			"        Ensures that only one instance of the class exists.",
			"        \"\"\"",
			"        if cls not in cls._instances:",
			"            cls._instances[cls] = super().__call__(*args, **kwargs)",
			"        return cls._instances[cls]",
            "",
            "class ${2:Product}(ABC):",
			"    \"\"\"",
			"    Abstract base class for '${2:Product}' objects.",
			"    It declares the interface for the type of objects that the factory method creates.",
			"    \"\"\"",
			"    @abstractmethod",
			"    def ${3:operation}(self) -> None:",
			"        \"\"\"",
			"        Abstract ${3:operation} method. Needs to be implemented by concrete '${2:Product}' objects.",
			"        \"\"\"",
			"        pass",
			"",
			"class ${4:ConcreteProductA}(${2:Product}):",
			"    \"\"\"",
			"    Concrete product class that implements the '${2:Product}' interface.",
			"    \"\"\"",
			"    def ${3:operation}(self) -> None:",
			"        pass",
			"",
			"class ${5:ConcreteProductB}(${2:Product}):",
			"    \"\"\"",
			"    Another concrete product class that implements the '${2:Product}' interface.",
			"    \"\"\"",
			"    def ${3:operation}(self) -> None:",
			"        pass",
			"",
			"class ${6:Creator}(ABC, metaclass=${1:SingletonMeta}):",
			"    \"\"\"",
			"    Abstract base class for '${6:Creator}' objects.",
			"    It declares the factory method that is supposed to return an object of type '${2:Product}'.",
            "    The ${1:SingletonMeta} metaclass ensures that only one instance of each creator class exists.",
			"    \"\"\"",
			"    @abstractmethod",
			"    def ${7:factory_method}(self) -> ${2:Product}:",
			"        \"\"\"",
			"        Abstract ${7:factory_method} method. Needs to be implemented by concrete '${6:Creator}' objects.",
			"        ",
			"        Returns:",
			"            ${2:Product}: An object of type '${2:Product}'.",
			"        \"\"\"",
			"        pass",
			"",
			"class ${8:ConcreteCreatorA}(${6:Creator}):",
			"    \"\"\"",
			"    Concrete creator class that implements the '${6:Creator}' interface.",
			"    It overrides the factory method to create a '${4:ConcreteProductA}' instance.",
			"    \"\"\"",
			"    def ${7:factory_method}(self) -> ${4:ConcreteProductA}:",
			"        \"\"\"",
			"        Overrides the factory method to create a '${4:ConcreteProductA}' instance.",
			"        ",
			"        Returns:",
			"            ${4:ConcreteProductA}: An object of type '${4:ConcreteProductA}'.",
			"        \"\"\"",
			"        return ${4:ConcreteProductA}()",
			"",
			"class ${9:ConcreteCreatorB}(${6:Creator}):",
			"    \"\"\"",
			"    Another concrete creator class that implements the '${6:Creator}' interface.",
			"    It overrides the factory method to create a '${5:ConcreteProductB}' instance.",
			"    \"\"\"",
			"    def ${7:factory_method}(self) -> ${5:ConcreteProductB}:",
			"        \"\"\"",
			"        Overrides the factory method to create a '${5:ConcreteProductB}' instance.",
			"        ",
			"        Returns:",
			"            ${5:ConcreteProductB}: An object of type '${5:ConcreteProductB}'.",
			"        \"\"\"",
			"        return ${5:ConcreteProductB}()",
			""
        ],
        "description": "Combine Factory Method and Singleton patterns.\nThe Creator class is a Singleton, ensuring a single point of control for the creation process.\nConcrete creators extend Creator to produce different types of Products.\nEach call to the factory method creates a new instance of the respective Product, allowing flexibility in managing multiple instances of products while maintaining a globally controlled creation process."
    }
}